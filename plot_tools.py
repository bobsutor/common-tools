# -------------------------------------------------------------------------------------------------
# Tools used across all reports
# -------------------------------------------------------------------------------------------------

# cspell:ignore APAC Aptos automargin categoryarray categoryorder EMEA Futurum gridcolor
# cspell:ignore gridwidth insidetextanchor LATAM linecolor OxmlElement qn showgrid showline
# cspell:ignore sizex sizey textangle textfont textposition tickangle tickfont tickmode
# cspell:ignore twips xaxes xaxis yaxes yaxis yref


import math

import geo_tools
import os_tools
import plotly.graph_objects as go  # type: ignore
from common_data import BANANA_YELLOW
from common_data import CHART_HEIGHT
from common_data import CHART_WIDTH
from common_data import FOR_FUTURUM
from common_data import FUTURUM_COLORS
from common_data import FUTURUM_LOGO_PATH
from common_data import HARVARD_CRIMSON
from common_data import ROYAL_BLUE
from common_data import SHOW_CHART_LOGOS
from common_data import SHOW_FIGURE_NUMBERS
from common_data import SUTOR_GROUP_LOGO_PATH
from PIL import Image
from sty import fg  # type: ignore

BACKGROUND_COLOR = "white"
# BACKGROUND_COLOR = "rgba(0,0,0,0)"  # transparent


# -------------------------------------------------------------------------------------------------
# Color tools
# -------------------------------------------------------------------------------------------------

# https://colorkit.co/
# https://plotly.com/python/discrete-color/

# import random

# import plotly.colors as colors  # type: ignore


def interpolate_color(start_hex, end_hex, steps):
    if FOR_FUTURUM:
        color_list = steps * FUTURUM_COLORS
        return color_list[:steps]

    # Generated by Perplexity

    # Convert hex to RGB
    start_rgb = tuple(int(start_hex[i : i + 2], 16) for i in (1, 3, 5))
    end_rgb = tuple(int(end_hex[i : i + 2], 16) for i in (1, 3, 5))

    # Calculate step size for each color component
    step_r = (end_rgb[0] - start_rgb[0]) / (steps - 1)
    step_g = (end_rgb[1] - start_rgb[1]) / (steps - 1)
    step_b = (end_rgb[2] - start_rgb[2]) / (steps - 1)

    # Generate interpolated colors
    color_list = []
    for i in range(steps):
        r = int(start_rgb[0] + step_r * i)
        g = int(start_rgb[1] + step_g * i)
        b = int(start_rgb[2] + step_b * i)
        color_list.append(f"#{r:02x}{g:02x}{b:02x}")

    return color_list


def generate_color_palette(minimum_length: int) -> list[str]:
    if minimum_length < 4:
        palette = generate_color_palette(20)
        return [palette[3], HARVARD_CRIMSON, ROYAL_BLUE]
    palette = (
        interpolate_color(BANANA_YELLOW, HARVARD_CRIMSON, 1 + minimum_length // 2)
        + interpolate_color(HARVARD_CRIMSON, ROYAL_BLUE, 1 + minimum_length // 2)[1:]
    )
    return palette


# -------------------------------------------------------------------------------------------------
# Plotting tools
# -------------------------------------------------------------------------------------------------

X_AXIS_TICK_SIZE = 32


if FOR_FUTURUM:
    LOGO = Image.open(FUTURUM_LOGO_PATH)
    STRETCH = 0.10
else:
    LOGO = Image.open(SUTOR_GROUP_LOGO_PATH)
    STRETCH = 0.14


def y_max_with_rounder(rounder, y_max):
    if y_max % rounder == 0:
        y_max += rounder
    else:
        y_max = int(rounder * math.ceil(y_max / float(rounder)))

    return y_max


def set_figure_defaults(figure, figure_count, title, title_x, title_y, total_companies):
    if FOR_FUTURUM:
        PLOT_FONT_FAMILY = "Arial, Aptos, san-serif, IBM Plex Sans"
    else:
        PLOT_FONT_FAMILY = "Aptos, Arial, san-serif, IBM Plex Sans"

    # General settings

    if title:
        print(f"Creating chart {fg.green}'{title}'{fg.rs}")

    figure.update_layout(
        font_family=PLOT_FONT_FAMILY,
        font_color="black",
        font_size=24,
        autosize=False,
        width=CHART_WIDTH,
        height=CHART_HEIGHT,
        paper_bgcolor=BACKGROUND_COLOR,
        plot_bgcolor=BACKGROUND_COLOR,
    )

    # Axes

    figure.update_xaxes(
        type="category",
        showline=True,
        linewidth=1,
        linecolor="black",
        tickmode="linear",
        tickfont=dict(size=X_AXIS_TICK_SIZE),
        tickangle=-45,
    )

    figure.update_yaxes(showgrid=True, gridwidth=1, gridcolor="gray")
    figure.update_yaxes(showline=True, linewidth=1, linecolor="black")

    figure.update_traces(textfont_size=X_AXIS_TICK_SIZE, textangle=0, textposition="outside")

    # Titles

    font_spec = dict()
    font_spec["family"] = PLOT_FONT_FAMILY
    font_spec["size"] = 36
    font_spec["weight"] = "bold"
    font_spec["color"] = "black"

    figure.update_layout(title={"text": title, "x": 0.5, "automargin": False, "font": font_spec})

    if SHOW_FIGURE_NUMBERS:
        figure.update_layout(
            xaxis_title=title_x + f"<br><br>Figure {figure_count}",
            xaxis_title_font=dict(weight="bold", size=36),
        )
    else:
        figure.update_layout(xaxis_title=title_x, xaxis_title_font=dict(weight="bold", size=36))

    figure.update_layout(yaxis_title=title_y, yaxis_title_font=dict(weight="bold", size=36))

    if total_companies > 0:
        font_spec["size"] = 38
        font_spec["weight"] = "bold"

        figure.update_layout(
            title=dict(
                subtitle=dict(text=f"Total Number of Distinct Companies = {total_companies}", font=font_spec)
            )
        )

    # Margins

    figure.update_layout(
        margin=dict(
            l=100,  # Set the left margin to 50 pixels
            r=20,  # Right margin
            # t=20,  # Top margin
            # b=20   # Bottom margin
        )
    )

    # Logo

    if SHOW_CHART_LOGOS:
        figure.add_layout_image(
            dict(
                source=LOGO,
                xref="paper",
                yref="paper",
                x=0.01,
                y=1.0,
                sizex=STRETCH,
                sizey=STRETCH,
                opacity=1.0,
                layer="above",
            )
        )


def companies_in_countries_chart(
    xs, ys, figure_count, title, title_x, title_y, total_companies, rounder, chart_file
):
    print("Building companies in countries chart: ", end="")
    os_tools.start_timer()

    fig = go.Figure(
        [
            go.Bar(
                x=xs,
                y=ys,
                text=[str(y) for y in ys],
                marker={"color": generate_color_palette(len(xs)), "line": dict(color="black", width=1)},
                textposition="outside",
                insidetextanchor="middle",
            )
        ]
    )

    set_figure_defaults(fig, figure_count, title, title_x, title_y, total_companies)

    if ys:
        max_ys = max(ys)
    else:
        max_ys = 0

    fig.update_layout(yaxis=dict(range=[0, y_max_with_rounder(rounder, max_ys)]))

    fig.write_image(chart_file, format="png", engine="kaleido")

    print(f"{os_tools.end_timer()} seconds")

    return fig


def companies_in_us_states_chart(
    xs, ys, figure_count, title, title_x, title_y, total_companies, rounder, chart_file
):
    print("Building companies in US states chart: ", end="")
    os_tools.start_timer()

    fig = go.Figure(
        [
            go.Bar(
                x=xs,
                y=ys,
                text=[str(y) for y in ys],
                marker={"color": generate_color_palette(len(xs)), "line": dict(color="black", width=1)},
                textposition="outside",
                insidetextanchor="middle",
            )
        ]
    )

    set_figure_defaults(fig, figure_count, title, title_x, title_y, total_companies)

    if ys:
        max_ys = max(ys)
    else:
        max_ys = 0

    fig.update_layout(yaxis=dict(range=[0, y_max_with_rounder(rounder, max_ys)]))

    fig.write_image(chart_file, format="png", engine="kaleido")

    print(f"{os_tools.end_timer()} seconds")

    return fig


def companies_in_canadian_provinces_chart(
    xs, ys, figure_count, title, title_x, title_y, total_companies, rounder, chart_file
):
    print("Building companies in Canadian provinces chart: ", end="")
    os_tools.start_timer()

    fig = go.Figure(
        [
            go.Bar(
                x=xs,
                y=ys,
                text=[str(y) for y in ys],
                marker={"color": generate_color_palette(len(xs)), "line": dict(color="black", width=1)},
                textposition="outside",
                insidetextanchor="middle",
            )
        ]
    )

    set_figure_defaults(fig, figure_count, title, title_x, title_y, total_companies)

    if ys:
        max_ys = max(ys)
    else:
        max_ys = 0

    fig.update_layout(yaxis=dict(range=[0, y_max_with_rounder(rounder, max_ys)]))

    fig.update_layout(
        yaxis=dict(
            dtick=1  # Show a tick for every integer
        )
    )

    fig.write_image(chart_file, format="png", engine="kaleido")

    print(f"{os_tools.end_timer()} seconds")

    return fig


def companies_in_regions_chart(
    xs, ys, figure_count, title, title_x, title_y, total_companies, rounder, chart_file
):
    print("Building companies in regions chart: ", end="")
    os_tools.start_timer()

    region_order = geo_tools.get_region_abbreviations()
    assert len(xs) == len(region_order)

    new_ys = []

    for region in region_order:
        ix = xs.index(region)
        new_ys.append(ys[ix])

    fig = go.Figure(
        [
            go.Bar(
                x=region_order,
                y=new_ys,
                text=[str(y) for y in new_ys],
                marker={
                    "color": generate_color_palette(len(region_order)),
                    "line": dict(color="black", width=1),
                },
                textposition="outside",
                insidetextanchor="middle",
            )
        ]
    )

    set_figure_defaults(fig, figure_count, title, title_x, title_y, total_companies)

    if new_ys:
        max_ys = max(new_ys)
    else:
        max_ys = 0

    fig.update_layout(yaxis=dict(range=[0, y_max_with_rounder(rounder, max_ys)]))

    fig.update_layout(xaxis=dict(categoryorder="array", categoryarray=region_order))  # likely redundant

    # we draw a vertical line after the NA bar

    post_na_position = region_order.index("NA") + 0.5

    fig.update_layout(
        shapes=[
            dict(
                type="line",
                x0=post_na_position,
                y0=0,
                x1=post_na_position,
                y1=max(ys),
                line=dict(color="Gray", width=8),
            )
        ]
    )

    fig.write_image(chart_file, format="png", engine="kaleido")

    print(f"{os_tools.end_timer()} seconds")

    return fig


def years_founded_chart(xs, ys, figure_count, title, title_x, title_y, total_companies, rounder, chart_file):
    print("Building companies and years founded chart: ", end="")
    os_tools.start_timer()

    fig = go.Figure(
        [
            go.Bar(
                x=xs,
                y=ys,
                text=[str(y) for y in ys],
                marker={"color": generate_color_palette(len(xs)), "line": dict(color="black", width=1)},
                textposition="outside",
                insidetextanchor="middle",
            )
        ]
    )

    set_figure_defaults(fig, figure_count, title, title_x, title_y, total_companies)

    if ys:
        max_ys = max(ys)
    else:
        max_ys = 0

    fig.update_layout(yaxis=dict(range=[0, y_max_with_rounder(rounder, max_ys)]))

    fig.write_image(chart_file, format="png", engine="kaleido")

    print(f"{os_tools.end_timer()} seconds")

    return fig
